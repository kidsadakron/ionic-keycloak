{"version":3,"file":"keycloak-auth.service.d.ts","sources":["keycloak-auth.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { DeepLinkService } from './deep-link.service';\nimport { StorageService } from './storage.service';\nimport { BrowserTab } from '@ionic-native/browser-tab/ngx';\nimport { Observable } from 'rxjs';\nimport { InAppBrowser } from '@ionic-native/in-app-browser/ngx';\nimport { Router } from '@angular/router';\nimport { IDTokenDecoded } from '../model/id-token-decoded';\nimport { KcConfig } from '../model/kc-config';\nimport { DeepLinkConfig } from '../model/deep-link-config';\nimport { AuthToken } from '../model/auth-token';\nimport { TokenDecoded } from '../model/token-decoded';\nexport declare class KeycloakAuthService {\n    protected http: HttpClient;\n    protected browserTab: BrowserTab;\n    protected router: Router;\n    protected storage: StorageService;\n    protected inAppBrowser: InAppBrowser;\n    protected deepLinkService: DeepLinkService;\n    private subject;\n    private scope;\n    private readonly appPrefix;\n    private readonly keycloakConfig;\n    private actualKeycloakConfig;\n    private keycloakInstance;\n    constructor(deepLinkConfig: DeepLinkConfig, kcConfig: KcConfig, http: HttpClient, browserTab: BrowserTab, router: Router, storage: StorageService, inAppBrowser: InAppBrowser, deepLinkService: DeepLinkService);\n    /**\n     *\n     */\n    user(): Observable<IDTokenDecoded>;\n    /**\n     *\n     */\n    init(): Promise<AuthToken>;\n    /**\n     *\n     */\n    logout(): Promise<void>;\n    /**\n     *\n     * @param isLogin\n     * @param redirectUrl\n     */\n    login(isLogin?: boolean, redirectUrl?: string): Promise<AuthToken>;\n    /**\n     *\n     * @param refresh\n     */\n    getToken(refresh?: boolean): Promise<string>;\n    getTokenDecoded(refresh?: boolean): Promise<TokenDecoded>;\n    private getLogoutUrl;\n    private getKcJsonStructure;\n    private handleNewToken;\n    private createPostRequest;\n    private getRefreshParams;\n    private getAccessTokenParams;\n    private getTokenRequestHeaders;\n    private refresh;\n    private getTokenUrl;\n    private isValidToken;\n    private initKeycloakInstance;\n    private initKeycloak;\n    private beginLoginAndGetCode;\n    private continueLoginWithCode;\n}\n"]}