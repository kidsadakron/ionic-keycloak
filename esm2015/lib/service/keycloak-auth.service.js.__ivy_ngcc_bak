/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * Copyright (c) 2019. This Code is under license and belongs to Coding Motion
 */
import { Inject, Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { DeepLinkService } from './deep-link.service';
import { StorageService } from './storage.service';
import { BrowserTab } from '@ionic-native/browser-tab/ngx';
import { JwtHelperService } from '@auth0/angular-jwt';
import { BehaviorSubject } from 'rxjs';
import * as Keycloak_ from 'keycloak-js';
import { InAppBrowser } from '@ionic-native/in-app-browser/ngx';
import { Router } from '@angular/router';
import { KcConfig } from '../model/kc-config';
import { DeepLinkConfig } from '../model/deep-link-config';
import { KEYCLOAK_OPTIONS } from '../contant/kc-injection-token';
import { DEEP_LINKING_OPTIONS } from '../contant/deep-linking-config-injection-token';
// Workaround from https://github.com/ng-packagr/ng-packagr/issues/343#issuecomment-350965445
/** @type {?} */
const Keycloak = Keycloak_;
/** @type {?} */
const jwtHelperService = new JwtHelperService();
export class KeycloakAuthService {
    /**
     * @param {?} deepLinkConfig
     * @param {?} kcConfig
     * @param {?} http
     * @param {?} browserTab
     * @param {?} router
     * @param {?} storage
     * @param {?} inAppBrowser
     * @param {?} deepLinkService
     */
    constructor(deepLinkConfig, kcConfig, http, browserTab, router, storage, inAppBrowser, deepLinkService) {
        this.http = http;
        this.browserTab = browserTab;
        this.router = router;
        this.storage = storage;
        this.inAppBrowser = inAppBrowser;
        this.deepLinkService = deepLinkService;
        this.scope = kcConfig.scope;
        this.keycloakConfig = kcConfig.jsonConfig;
        this.appPrefix = `${deepLinkConfig.deepLinkingScheme}://app`;
    }
    /**
     *
     * @return {?}
     */
    user() {
        if (!this.subject) {
            this.subject = new BehaviorSubject(null);
        }
        return this.subject.asObservable();
    }
    /**
     *
     * @return {?}
     */
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.initKeycloak();
            return this.refresh();
        });
    }
    /**
     *
     * @return {?}
     */
    logout() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.handleNewToken(null);
            /** @type {?} */
            const url = this.getLogoutUrl();
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            (resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (yield this.browserTab.isAvailable()) {
                    this.browserTab.openUrl(url)
                        .then((/**
                     * @return {?}
                     */
                    () => this.browserTab.close()))
                        .catch((/**
                     * @param {?} err
                     * @return {?}
                     */
                    err => reject(err)));
                    resolve();
                }
                else {
                    /** @type {?} */
                    const browser = this.inAppBrowser.create(url, '_system');
                    /** @type {?} */
                    const sub = browser.on('loadstop')
                        .subscribe((/**
                     * @return {?}
                     */
                    () => {
                        browser.close();
                        resolve();
                        sub.unsubscribe();
                    }), (/**
                     * @param {?} err
                     * @return {?}
                     */
                    err => {
                        reject(err);
                        sub.unsubscribe();
                    }));
                }
            })));
        });
    }
    /**
     *
     * @param {?=} isLogin
     * @param {?=} redirectUrl
     * @return {?}
     */
    login(isLogin = true, redirectUrl) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                if (redirectUrl[0] === '/') {
                    redirectUrl = redirectUrl.substr(1);
                }
                /** @type {?} */
                const response = yield this.beginLoginAndGetCode(redirectUrl, isLogin);
                return this.continueLoginWithCode(response);
            }
            catch (err) {
                /** @type {?} */
                const context = { messageError: 'Ionic Keycloak Error: error by login' };
                Object.assign(err, { context });
                throw err;
            }
        });
    }
    /**
     *
     * @param {?=} refresh
     * @return {?}
     */
    getToken(refresh = false) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let authToken = yield this.storage.getToken();
            if (!authToken) {
                return null;
            }
            if (refresh || jwtHelperService.isTokenExpired(authToken.access_token, 10)) {
                authToken = yield this.refresh();
            }
            return authToken.access_token;
        });
    }
    /**
     * @param {?=} refresh
     * @return {?}
     */
    getTokenDecoded(refresh = false) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const token = yield this.getToken(refresh);
            return (/** @type {?} */ (jwtHelperService.decodeToken(token)));
        });
    }
    /**
     * @private
     * @param {?=} redirectUrl
     * @return {?}
     */
    getLogoutUrl(redirectUrl = this.router.url) {
        return this.keycloakInstance.createLogoutUrl({
            redirectUri: this.appPrefix + encodeURIComponent(redirectUrl)
        });
    }
    /**
     * @private
     * @return {?}
     */
    getKcJsonStructure() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const prom = this.keycloakConfig();
            /** @type {?} */
            let config;
            if (prom instanceof Promise) {
                config = yield prom;
            }
            else {
                config = prom;
            }
            /**
             * This line because the init method needs the clientId and url to work
             * which are the resource and the auth-server-url respectively
             */
            config.clientId = config.resource;
            config.url = config['auth-server-url'];
            return config;
        });
    }
    /**
     * @private
     * @param {?} authToken
     * @return {?}
     */
    handleNewToken(authToken) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (authToken) {
                /** @type {?} */
                const user = jwtHelperService.decodeToken(authToken.id_token || authToken.access_token);
                if (!this.subject) {
                    this.subject = new BehaviorSubject(user);
                }
                this.subject.next(user);
                yield this.storage.setToken(authToken);
            }
            else {
                if (!this.subject) {
                    this.subject = new BehaviorSubject(null);
                }
                this.subject.next(null);
                yield this.storage.setToken(null);
            }
        });
    }
    /**
     * @private
     * @param {?} uri
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    createPostRequest(uri, body, options) {
        return this.http.post(uri, body, options).toPromise();
    }
    /**
     * @private
     * @param {?} refreshToken
     * @return {?}
     */
    getRefreshParams(refreshToken) {
        /** @type {?} */
        const params = new HttpParams()
            .set('grant_type', 'refresh_token')
            .set('refresh_token', refreshToken)
            .set('client_id', encodeURIComponent(this.keycloakInstance.clientId));
        /** @type {?} */
        const secret = this.keycloakInstance.clientSecret;
        if (secret) {
            return params
                .set('client_secret', encodeURIComponent(secret));
        }
        return params;
    }
    /**
     * @private
     * @param {?} code
     * @param {?} redirectUrl
     * @return {?}
     */
    getAccessTokenParams(code, redirectUrl) {
        /** @type {?} */
        let redirectUri = new HttpParams()
            .set('grant_type', 'authorization_code')
            .set('code', code)
            .set('client_id', encodeURIComponent(this.keycloakInstance.clientId))
            .set('redirect_uri', redirectUrl);
        if (this.scope || (this.actualKeycloakConfig && this.actualKeycloakConfig.scope)) {
            redirectUri = redirectUri.set('scope', this.scope || this.actualKeycloakConfig.scope);
        }
        /** @type {?} */
        const secret = this.keycloakInstance.clientSecret;
        if (secret) {
            redirectUri = redirectUri.set('client_secret', encodeURIComponent(secret));
        }
        return redirectUri;
    }
    /**
     * @private
     * @return {?}
     */
    getTokenRequestHeaders() {
        /** @type {?} */
        const headers = new HttpHeaders()
            .set('Content-Type', 'application/x-www-form-urlencoded');
        /** @type {?} */
        const clientSecret = this.keycloakInstance.clientSecret;
        /** @type {?} */
        const clientId = this.keycloakInstance.clientId;
        if (clientId && clientSecret) {
            headers.set('Authorization', 'Basic ' + btoa(clientId + ':' + clientSecret));
        }
        return headers;
    }
    /**
     * @private
     * @return {?}
     */
    refresh() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                /** @type {?} */
                let tokens = yield this.storage.getToken();
                if (tokens) {
                    if (!this.isValidToken(tokens)) {
                        /** @type {?} */
                        const uri = this.getTokenUrl();
                        /** @type {?} */
                        const headers = this.getTokenRequestHeaders();
                        /** @type {?} */
                        const body = this.getRefreshParams(tokens.refresh_token);
                        tokens = yield this.createPostRequest(uri, body, { headers });
                    }
                }
                this.handleNewToken(tokens);
                return tokens;
            }
            catch (e) {
                yield this.logout();
                return null;
            }
        });
    }
    /**
     * @private
     * @return {?}
     */
    getTokenUrl() {
        return `${this.keycloakInstance.authServerUrl}/realms/${this.keycloakInstance.realm}/protocol/openid-connect/token`;
    }
    /**
     * @private
     * @param {?} authToken
     * @return {?}
     */
    isValidToken(authToken) {
        if (!authToken) {
            return false;
        }
        return jwtHelperService.isTokenExpired(authToken.access_token, 10);
    }
    /**
     * @private
     * @return {?}
     */
    initKeycloakInstance() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const keycloakConfig = yield this.getKcJsonStructure();
            this.actualKeycloakConfig = keycloakConfig;
            this.keycloakInstance = Keycloak(keycloakConfig);
        });
    }
    /**
     * @private
     * @return {?}
     */
    initKeycloak() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.initKeycloakInstance();
            this.keycloakInstance
                .init({
                adapter: 'cordova-native',
                redirectUri: this.appPrefix + '/'
            });
        });
    }
    /**
     * @private
     * @param {?} path
     * @param {?=} login
     * @return {?}
     */
    beginLoginAndGetCode(path, login = true) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            path = `${this.appPrefix}/${path}`;
            yield this.storage.setToken(null);
            /** @type {?} */
            const options = {
                redirectUri: path
            };
            /** @type {?} */
            const url = login
                ? this.keycloakInstance.createLoginUrl(options)
                : this.keycloakInstance.createRegisterUrl(options);
            if (yield this.browserTab.isAvailable()) {
                this.browserTab.openUrl(url);
            }
            else {
                this.inAppBrowser.create(url, '_system');
            }
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            (resolve, reject) => {
                /** @type {?} */
                const sub = this.deepLinkService
                    .params()
                    .subscribe((/**
                 * @param {?} code
                 * @return {?}
                 */
                code => {
                    resolve({ code, redirectUri: path });
                    sub.unsubscribe();
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    reject(error);
                    sub.unsubscribe();
                }));
            }));
        });
    }
    /**
     * @private
     * @param {?} __0
     * @return {?}
     */
    continueLoginWithCode({ code, redirectUri: redirectUrl }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.browserTab.close()
                .catch((/**
             * @param {?=} err
             * @return {?}
             */
            (err = {}) => {
                /** @type {?} */
                const context = { message: 'Error while closing the browser' };
                console.log(context.message, err);
                Object.assign(err, { context });
                throw err;
            }));
            /** @type {?} */
            const uri = this.getTokenUrl();
            /** @type {?} */
            const body = this.getAccessTokenParams(code, redirectUrl);
            /** @type {?} */
            const headers = this.getTokenRequestHeaders();
            return this.createPostRequest(uri, body, { headers })
                .then((/**
             * @param {?} authToken
             * @return {?}
             */
            (authToken) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                this.handleNewToken(authToken);
                return authToken;
            })));
        });
    }
}
KeycloakAuthService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
KeycloakAuthService.ctorParameters = () => [
    { type: DeepLinkConfig, decorators: [{ type: Inject, args: [DEEP_LINKING_OPTIONS,] }] },
    { type: KcConfig, decorators: [{ type: Inject, args: [KEYCLOAK_OPTIONS,] }] },
    { type: HttpClient },
    { type: BrowserTab },
    { type: Router },
    { type: StorageService },
    { type: InAppBrowser },
    { type: DeepLinkService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    KeycloakAuthService.prototype.subject;
    /**
     * @type {?}
     * @private
     */
    KeycloakAuthService.prototype.scope;
    /**
     * @type {?}
     * @private
     */
    KeycloakAuthService.prototype.appPrefix;
    /**
     * @type {?}
     * @private
     */
    KeycloakAuthService.prototype.keycloakConfig;
    /**
     * @type {?}
     * @private
     */
    KeycloakAuthService.prototype.actualKeycloakConfig;
    /**
     * @type {?}
     * @private
     */
    KeycloakAuthService.prototype.keycloakInstance;
    /**
     * @type {?}
     * @protected
     */
    KeycloakAuthService.prototype.http;
    /**
     * @type {?}
     * @protected
     */
    KeycloakAuthService.prototype.browserTab;
    /**
     * @type {?}
     * @protected
     */
    KeycloakAuthService.prototype.router;
    /**
     * @type {?}
     * @protected
     */
    KeycloakAuthService.prototype.storage;
    /**
     * @type {?}
     * @protected
     */
    KeycloakAuthService.prototype.inAppBrowser;
    /**
     * @type {?}
     * @protected
     */
    KeycloakAuthService.prototype.deepLinkService;
}
//# sourceMappingURL=data:application/json;base64,