/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * Copyright (c) 2019. This Code is under license and belongs to Coding Motion
 */
import { NgModule, Optional, SkipSelf } from '@angular/core';
import { Platform } from '@ionic/angular';
import { NativeStorage } from '@ionic-native/native-storage/ngx';
import { BrowserTab } from '@ionic-native/browser-tab/ngx';
import { JwtHelperService } from '@auth0/angular-jwt';
import { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';
import { Deeplinks } from '@ionic-native/deeplinks/ngx';
import { InAppBrowser } from '@ionic-native/in-app-browser/ngx';
import { DeepLinkService } from './service/deep-link.service';
import { KeycloakAuthService } from './service/keycloak-auth.service';
import { StorageService } from './service/storage.service';
import { KcTokenInterceptorService } from './service/kc-token-interceptor.service';
import { ModuleConfig } from './model/module-config';
import { JWT_GET_AND_SETTER } from './contant/jwt-injection-token';
import { KEYCLOAK_OPTIONS } from './contant/kc-injection-token';
import { DEEP_LINKING_OPTIONS } from './contant/deep-linking-config-injection-token';
export class IonicKeycloakAuthModule {
    /**
     * @param {?} platform
     * @param {?} authService
     * @param {?} deepLinkService
     * @param {?} parentModule
     */
    constructor(platform, authService, deepLinkService, parentModule) {
        this.platform = platform;
        this.authService = authService;
        this.deepLinkService = deepLinkService;
        if (parentModule) {
            throw new Error('JwtModule is already loaded. It should only be imported in your application\'s main module.');
        }
        this.platform
            .ready()
            .then((/**
         * @return {?}
         */
        () => this.authService.init()))
            .then((/**
         * @return {?}
         */
        () => this.deepLinkService.init()))
            .catch((/**
         * @param {?=} err
         * @return {?}
         */
        (err = {}) => {
            /** @type {?} */
            const context = { messageError: 'Ionic Keycloak Error: could not initialize the app' };
            Object.assign(err, { context });
            throw err;
        }));
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config = new ModuleConfig()) {
        return {
            ngModule: IonicKeycloakAuthModule,
            providers: [
                Deeplinks,
                BrowserTab,
                InAppBrowser,
                NativeStorage,
                HttpClientModule,
                config.kcOptionsProvider || { provide: KEYCLOAK_OPTIONS, useValue: config.keycloakConfig },
                config.jwtConfigProvider || { provide: JWT_GET_AND_SETTER, useValue: config.jwtModuleOptions },
                { provide: DEEP_LINKING_OPTIONS, useValue: config.deepLinksConfig },
                StorageService,
                DeepLinkService,
                KeycloakAuthService,
                JwtHelperService,
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: KcTokenInterceptorService,
                    multi: true
                },
            ]
        };
    }
}
IonicKeycloakAuthModule.decorators = [
    { type: NgModule }
];
/** @nocollapse */
IonicKeycloakAuthModule.ctorParameters = () => [
    { type: Platform },
    { type: KeycloakAuthService },
    { type: DeepLinkService },
    { type: IonicKeycloakAuthModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    IonicKeycloakAuthModule.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    IonicKeycloakAuthModule.prototype.authService;
    /**
     * @type {?}
     * @private
     */
    IonicKeycloakAuthModule.prototype.deepLinkService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9uaWMta2V5Y2xvYWstYXV0aC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY21vdGlvbi9pb25pYy1rZXljbG9hay1hdXRoLyIsInNvdXJjZXMiOlsibGliL2lvbmljLWtleWNsb2FrLWF1dGgubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFJQSxPQUFPLEVBQXNCLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sa0NBQWtDLENBQUM7QUFDL0QsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBQ3pELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3pFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sa0NBQWtDLENBQUM7QUFDOUQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQzVELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBQ3BFLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSx3Q0FBd0MsQ0FBQztBQUNqRixPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDbkQsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFDakUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDOUQsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sK0NBQStDLENBQUM7QUFHbkYsTUFBTSxPQUFPLHVCQUF1Qjs7Ozs7OztJQUVsQyxZQUNVLFFBQWtCLEVBQ2xCLFdBQWdDLEVBQ2hDLGVBQWdDLEVBQ2hCLFlBQXFDO1FBSHJELGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsZ0JBQVcsR0FBWCxXQUFXLENBQXFCO1FBQ2hDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUd4QyxJQUFJLFlBQVksRUFBRTtZQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLDZGQUE2RixDQUFDLENBQUM7U0FDaEg7UUFDRCxJQUFJLENBQUMsUUFBUTthQUNWLEtBQUssRUFBRTthQUNQLElBQUk7OztRQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEVBQUM7YUFDbkMsSUFBSTs7O1FBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsRUFBQzthQUN2QyxLQUFLOzs7O1FBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUU7O2tCQUNaLE9BQU8sR0FBRyxFQUFDLFlBQVksRUFBRSxvREFBb0QsRUFBQztZQUNwRixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxFQUFDLE9BQU8sRUFBQyxDQUFDLENBQUM7WUFDOUIsTUFBTSxHQUFHLENBQUM7UUFDWixDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7O0lBRU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUU7UUFDL0MsT0FBTztZQUNMLFFBQVEsRUFBRSx1QkFBdUI7WUFDakMsU0FBUyxFQUFFO2dCQUNULFNBQVM7Z0JBQ1QsVUFBVTtnQkFDVixZQUFZO2dCQUNaLGFBQWE7Z0JBQ2IsZ0JBQWdCO2dCQUNoQixNQUFNLENBQUMsaUJBQWlCLElBQUksRUFBQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxjQUFjLEVBQUM7Z0JBQ3hGLE1BQU0sQ0FBQyxpQkFBaUIsSUFBSSxFQUFDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLGdCQUFnQixFQUFDO2dCQUM1RixFQUFDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLGVBQWUsRUFBQztnQkFDakUsY0FBYztnQkFDZCxlQUFlO2dCQUNmLG1CQUFtQjtnQkFDbkIsZ0JBQWdCO2dCQUNoQjtvQkFDRSxPQUFPLEVBQUUsaUJBQWlCO29CQUMxQixRQUFRLEVBQUUseUJBQXlCO29CQUNuQyxLQUFLLEVBQUUsSUFBSTtpQkFDWjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7OztZQTlDRixRQUFROzs7O1lBaEJELFFBQVE7WUFRUixtQkFBbUI7WUFEbkIsZUFBZTtZQWdCbUIsdUJBQXVCLHVCQUE1RCxRQUFRLFlBQUksUUFBUTs7Ozs7OztJQUhyQiwyQ0FBMEI7Ozs7O0lBQzFCLDhDQUF3Qzs7Ozs7SUFDeEMsa0RBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxOS4gVGhpcyBDb2RlIGlzIHVuZGVyIGxpY2Vuc2UgYW5kIGJlbG9uZ3MgdG8gQ29kaW5nIE1vdGlvblxuICovXG5cbmltcG9ydCB7TW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUsIE9wdGlvbmFsLCBTa2lwU2VsZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1BsYXRmb3JtfSBmcm9tICdAaW9uaWMvYW5ndWxhcic7XG5pbXBvcnQge05hdGl2ZVN0b3JhZ2V9IGZyb20gJ0Bpb25pYy1uYXRpdmUvbmF0aXZlLXN0b3JhZ2Uvbmd4JztcbmltcG9ydCB7QnJvd3NlclRhYn0gZnJvbSAnQGlvbmljLW5hdGl2ZS9icm93c2VyLXRhYi9uZ3gnO1xuaW1wb3J0IHtKd3RIZWxwZXJTZXJ2aWNlfSBmcm9tICdAYXV0aDAvYW5ndWxhci1qd3QnO1xuaW1wb3J0IHtIVFRQX0lOVEVSQ0VQVE9SUywgSHR0cENsaWVudE1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtEZWVwbGlua3N9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZGVlcGxpbmtzL25neCc7XG5pbXBvcnQge0luQXBwQnJvd3Nlcn0gZnJvbSAnQGlvbmljLW5hdGl2ZS9pbi1hcHAtYnJvd3Nlci9uZ3gnO1xuaW1wb3J0IHtEZWVwTGlua1NlcnZpY2V9IGZyb20gJy4vc2VydmljZS9kZWVwLWxpbmsuc2VydmljZSc7XG5pbXBvcnQge0tleWNsb2FrQXV0aFNlcnZpY2V9IGZyb20gJy4vc2VydmljZS9rZXljbG9hay1hdXRoLnNlcnZpY2UnO1xuaW1wb3J0IHtTdG9yYWdlU2VydmljZX0gZnJvbSAnLi9zZXJ2aWNlL3N0b3JhZ2Uuc2VydmljZSc7XG5pbXBvcnQge0tjVG9rZW5JbnRlcmNlcHRvclNlcnZpY2V9IGZyb20gJy4vc2VydmljZS9rYy10b2tlbi1pbnRlcmNlcHRvci5zZXJ2aWNlJztcbmltcG9ydCB7TW9kdWxlQ29uZmlnfSBmcm9tICcuL21vZGVsL21vZHVsZS1jb25maWcnO1xuaW1wb3J0IHtKV1RfR0VUX0FORF9TRVRURVJ9IGZyb20gJy4vY29udGFudC9qd3QtaW5qZWN0aW9uLXRva2VuJztcbmltcG9ydCB7S0VZQ0xPQUtfT1BUSU9OU30gZnJvbSAnLi9jb250YW50L2tjLWluamVjdGlvbi10b2tlbic7XG5pbXBvcnQge0RFRVBfTElOS0lOR19PUFRJT05TfSBmcm9tICcuL2NvbnRhbnQvZGVlcC1saW5raW5nLWNvbmZpZy1pbmplY3Rpb24tdG9rZW4nO1xuXG5ATmdNb2R1bGUoKVxuZXhwb3J0IGNsYXNzIElvbmljS2V5Y2xvYWtBdXRoTW9kdWxlIHtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHBsYXRmb3JtOiBQbGF0Zm9ybSxcbiAgICBwcml2YXRlIGF1dGhTZXJ2aWNlOiBLZXljbG9ha0F1dGhTZXJ2aWNlLFxuICAgIHByaXZhdGUgZGVlcExpbmtTZXJ2aWNlOiBEZWVwTGlua1NlcnZpY2UsXG4gICAgQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgcGFyZW50TW9kdWxlOiBJb25pY0tleWNsb2FrQXV0aE1vZHVsZVxuICApIHtcbiAgICBpZiAocGFyZW50TW9kdWxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0p3dE1vZHVsZSBpcyBhbHJlYWR5IGxvYWRlZC4gSXQgc2hvdWxkIG9ubHkgYmUgaW1wb3J0ZWQgaW4geW91ciBhcHBsaWNhdGlvblxcJ3MgbWFpbiBtb2R1bGUuJyk7XG4gICAgfVxuICAgIHRoaXMucGxhdGZvcm1cbiAgICAgIC5yZWFkeSgpXG4gICAgICAudGhlbigoKSA9PiB0aGlzLmF1dGhTZXJ2aWNlLmluaXQoKSlcbiAgICAgIC50aGVuKCgpID0+IHRoaXMuZGVlcExpbmtTZXJ2aWNlLmluaXQoKSlcbiAgICAgIC5jYXRjaCgoZXJyID0ge30pID0+IHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHttZXNzYWdlRXJyb3I6ICdJb25pYyBLZXljbG9hayBFcnJvcjogY291bGQgbm90IGluaXRpYWxpemUgdGhlIGFwcCd9O1xuICAgICAgICBPYmplY3QuYXNzaWduKGVyciwge2NvbnRleHR9KTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZvclJvb3QoY29uZmlnID0gbmV3IE1vZHVsZUNvbmZpZygpKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBJb25pY0tleWNsb2FrQXV0aE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBEZWVwbGlua3MsXG4gICAgICAgIEJyb3dzZXJUYWIsXG4gICAgICAgIEluQXBwQnJvd3NlcixcbiAgICAgICAgTmF0aXZlU3RvcmFnZSxcbiAgICAgICAgSHR0cENsaWVudE1vZHVsZSxcbiAgICAgICAgY29uZmlnLmtjT3B0aW9uc1Byb3ZpZGVyIHx8IHtwcm92aWRlOiBLRVlDTE9BS19PUFRJT05TLCB1c2VWYWx1ZTogY29uZmlnLmtleWNsb2FrQ29uZmlnfSxcbiAgICAgICAgY29uZmlnLmp3dENvbmZpZ1Byb3ZpZGVyIHx8IHtwcm92aWRlOiBKV1RfR0VUX0FORF9TRVRURVIsIHVzZVZhbHVlOiBjb25maWcuand0TW9kdWxlT3B0aW9uc30sXG4gICAgICAgIHtwcm92aWRlOiBERUVQX0xJTktJTkdfT1BUSU9OUywgdXNlVmFsdWU6IGNvbmZpZy5kZWVwTGlua3NDb25maWd9LFxuICAgICAgICBTdG9yYWdlU2VydmljZSxcbiAgICAgICAgRGVlcExpbmtTZXJ2aWNlLFxuICAgICAgICBLZXljbG9ha0F1dGhTZXJ2aWNlLFxuICAgICAgICBKd3RIZWxwZXJTZXJ2aWNlLFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsXG4gICAgICAgICAgdXNlQ2xhc3M6IEtjVG9rZW5JbnRlcmNlcHRvclNlcnZpY2UsXG4gICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9O1xuICB9XG5cbn1cblxuIl19